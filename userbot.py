from telethon import TelegramClient, events
from telethon.tl.functions.channels import GetAdminLogRequest
from telethon.tl.types import InputChannel, ChannelAdminLogEventsFilter
import asyncio
from datetime import datetime, timedelta
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = ''
API_HASH = ''
CHAT_IDS = []  # ID —á–∞—Ç–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100
REPORT_CHAT_ID =   # –ß–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
ADMIN_ID = IDHere  # –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥

# –•—ç—à—Ç–µ–≥–∏ –¥–ª—è —á–∞—Ç–æ–≤
CHAT_HASHTAGS = {
    YOUR_CHAT_ID : '#–•–≠–®–¢–≠–ì',
    YOUR_CHAT_ID: '#–•–≠–®–¢–≠–ì',
    YOUR_CHAT_ID: '#–•–≠–®–¢–≠–ì'
}

# –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
UFA_TZ = pytz.timezone('Asia/Yekaterinburg')

client = TelegramClient('userbot_session', API_ID, API_HASH)

class BanMonitor:
    def __init__(self):
        self.last_check_times = {}
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BanMonitor –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def check_bans(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–æ–≤"""
        while True:
            try:
                for chat_id in CHAT_IDS:
                    await self.process_chat_bans(chat_id)
                await asyncio.sleep(60)
            except Exception as e:
                print(f"[–û–®–ò–ë–ö–ê –í check_bans]: {str(e)}", flush=True)
                await asyncio.sleep(300)

    async def process_chat_bans(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
        try:
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω—ã –≤ —á–∞—Ç–µ {chat_id}...")
            
            last_check = self.last_check_times.get(chat_id, datetime.now(pytz.utc) - timedelta(minutes=5))
            
            try:
                channel = await client.get_entity(chat_id)
                input_channel = InputChannel(channel.id, channel.access_hash)
            except Exception as e:
                print(f"[–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê {chat_id}]: {str(e)}", flush=True)
                return

            try:
                result = await client(GetAdminLogRequest(
                    channel=input_channel,
                    q='',
                    max_id=0,
                    min_id=0,
                    limit=100,
                    events_filter=ChannelAdminLogEventsFilter(
                        kick=True,
                        ban=True
                    )
                ))
            except Exception as e:
                print(f"[–û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê –õ–û–ì–û–í {chat_id}]: {str(e)}", flush=True)
                return

            new_events = [
                event for event in result.events 
                if event.date.replace(tzinfo=pytz.utc) > last_check.replace(tzinfo=pytz.utc)
            ]

            if not new_events:
                print(f"–ù–æ–≤—ã—Ö –±–∞–Ω–æ–≤ –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", flush=True)
                return

            last_event_time = None
            for event in new_events:
                event_time = event.date.replace(tzinfo=pytz.utc)
                
                banned_user_id = self._get_banned_user_id(event)
                if not banned_user_id:
                    continue

                try:
                    banned_user = await client.get_entity(banned_user_id)
                    admin_user = await client.get_entity(event.user_id)
                    
                    await self.send_ban_report(
                        chat_id=chat_id,
                        banned_user=banned_user,
                        admin_user=admin_user,
                        ban_time=event.date
                    )
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {banned_user_id} –≤ —á–∞—Ç–µ {chat_id}", flush=True)

                except Exception as e:
                    print(f"[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–Ø {chat_id}]: {str(e)}", flush=True)

                if not last_event_time or event_time > last_event_time:
                    last_event_time = event_time

            self.last_check_times[chat_id] = last_event_time if last_event_time else datetime.now(pytz.utc) - timedelta(seconds=1)
            
        except Exception as e:
            print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í process_chat_bans {chat_id}]: {str(e)}", flush=True)

    def _get_banned_user_id(self, event):
        """–ü–æ–ª—É—á–∞–µ–º ID –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        try:
            if not hasattr(event.action, 'prev_participant'):
                return None
                
            prev_part = event.action.prev_participant
            if hasattr(prev_part, 'user_id'):
                return prev_part.user_id
            elif hasattr(prev_part, 'peer') and hasattr(prev_part.peer, 'user_id'):
                return prev_part.peer.user_id
                
            return None
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê –í _get_banned_user_id]: {str(e)}", flush=True)
            return None

    async def send_ban_report(self, chat_id, banned_user, admin_user, ban_time):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –±–∞–Ω–µ —Å username –∏ ID"""
        try:
            hashtag = CHAT_HASHTAGS.get(chat_id, '')
            
            ban_time = ban_time.replace(tzinfo=pytz.utc)
            moscow_time = ban_time.astimezone(MOSCOW_TZ)
            
            time_info = (
                f"‚è∞ –í—Ä–µ–º—è:\n"
                f"–ú–æ—Å–∫–≤–∞: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"UTC: {ban_time.strftime('%Y-%m-%d %H:%M:%S')}"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º
            banned_name = banned_user.first_name or ""
            if banned_user.last_name:
                banned_name += f" {banned_user.last_name}"
            banned_username = f"@{banned_user.username}" if banned_user.username else "–Ω–µ—Ç username"
            banned_id = f"ID: {banned_user.id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
            admin_name = admin_user.first_name or ""
            if admin_user.last_name:
                admin_name += f" {admin_user.last_name}"
            admin_username = f"@{admin_user.username}" if admin_user.username else "–Ω–µ—Ç username"
            admin_id = f"ID: {admin_user.id}"

            report_text = (
                f"üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω {hashtag}\n\n"
                f"üë§ –ó–∞–±–∞–Ω–µ–Ω:\n"
                f"–ò–º—è: {banned_name.strip()}\n"
                f"Username: {banned_username}\n"
                f"{banned_id}\n\n"
                f"üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n"
                f"–ò–º—è: {admin_name.strip()}\n"
                f"Username: {admin_username}\n"
                f"{admin_id}\n\n"
                f"{time_info}"
            )

            await client.send_message(
                entity=REPORT_CHAT_ID,
                message=report_text
            )
            
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –û–¢–ß–ï–¢–ê]: {str(e)}", flush=True)
            raise

async def main():
    try:
        await client.start()
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", flush=True)
        
        ban_monitor = BanMonitor()
        asyncio.create_task(ban_monitor.check_bans())
        
        @client.on(events.NewMessage(pattern='/test_ban', from_users=ADMIN_ID))
        async def test_ban_report(event):
            try:
                test_time = datetime.now(pytz.utc)
                await ban_monitor.send_ban_report(
                    chat_id=CHAT_IDS[0],
                    banned_user=type('', (), {
                        'first_name': 'TestUser',
                        'last_name': 'Testovich',
                        'username': 'test_user',
                        'id': 123456789
                    }),
                    admin_user=type('', (), {
                        'first_name': 'TestAdmin',
                        'last_name': 'Adminov',
                        'username': 'test_admin',
                        'id': 987654321
                    }),
                    ban_time=test_time
                )
                await event.reply("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                print("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", flush=True)
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                print(f"[–û–®–ò–ë–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–¢–ß–ï–¢–ê]: {str(e)}", flush=True)
        
        print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...", flush=True)
        await client.run_until_disconnected()
    except Exception as e:
        print(f"[–ì–õ–ê–í–ù–ê–Ø –û–®–ò–ë–ö–ê]: {str(e)}", flush=True)
    finally:
        await client.disconnect()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", flush=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê]: {str(e)}", flush=True)